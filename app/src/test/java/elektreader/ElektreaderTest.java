/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package elektreader;

import org.junit.jupiter.api.Test;

import elektreader.api.PlayList;
import elektreader.api.Reader;
import elektreader.model.Mp3PlayList;
import elektreader.model.ReaderImpl;
import javafx.application.Platform;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;

class ElektreaderTest {
    /*
     * If you are using JavaFX components in a non-GUI application or a unit test,
     *  you need to call the Platform.startup(Runnable) method with an empty runnable before using any JavaFX classes.
     *  This will initialize the JavaFX toolkit without creating a stage or a scene.
     */
    private void notGUIToolkitInitialized() {
        Platform.startup(() -> {});
    }

    /* TEST CONSTANT */

    /* mi raccomando per i test posizionare la cartella nel percorso specificato */
    /* cartella: https://drive.google.com/file/d/1b5JAQ3Hc6FRwvO2BjIb7olaxOApJDrfp/view?usp=sharing */
    final Path TEST_PATH = Paths.get(System.getProperty("user.home"),"elektreaderTEST","Environment");
    final Path TEST_INVALID_PATH = Paths.get(System.getProperty("user.home"),"ALL","Photoes");

    final Path TEST_INVALID_PLAYLIST = Paths.get(TEST_PATH.toString(), "GENERI"); 

    final Path TEST_PATH_PLAYLIST1 = Paths.get(TEST_PATH.toString(), "tutta la musica");
    final Path TEST_PATH_SONG1 = Paths.get(TEST_PATH_PLAYLIST1.toString(), "04 - la bomba.mp3");
    
    final Path TEST_PATH_PLAYLIST2 = Paths.get(TEST_PATH.toString(), "GENERI", "MUSICA ROMAGNOLA");
    final Path TEST_PATH_SONG2_15 = Paths.get(TEST_PATH_PLAYLIST2.toString(), "15 - Bachata di Mengoni.mp3");
    final Path TEST_PATH_SONG2_16 = Paths.get(TEST_PATH_PLAYLIST2.toString(), "16 - valzer dell'usignolo.mp3");

    final Path TEST_INVALID_SONG = Paths.get(TEST_PATH_PLAYLIST1.toString(), "31 - video flashmob balla.mp4"); 

    /* TESTS */
    
    @Test void testEnvironment() { /* test all the environment */
        notGUIToolkitInitialized();
        Reader app = new ReaderImpl();

        /* test environment */
        /* test invalid path */
        Assertions.assertFalse(app.setCurrentEnvironment(TEST_INVALID_PATH));
        Assertions.assertEquals(app.getCurrentEnvironment(), Optional.empty());
        
        /* test valid */
        Assertions.assertTrue(app.setCurrentEnvironment(TEST_PATH));
        Assertions.assertEquals(app.getCurrentEnvironment().get(), TEST_PATH);
        

        /* test playlist - song */ 
        //test valid playlist 1
        Assertions.assertTrue(app.setCurrentPlaylist(app.getPlaylist(TEST_PATH_PLAYLIST1)));
        Assertions.assertEquals(app.getCurrentPlaylist().get().getPath(), TEST_PATH_PLAYLIST1);
        
        //test invalid song - current playlist 1
        Assertions.assertFalse(app.setCurrentSong(app.getPlaylist(TEST_PATH_PLAYLIST2).get().getSong(TEST_PATH_SONG1)));
        Assertions.assertEquals(app.getCurrentSong(), Optional.empty());

        //test valid playlist 2
        Assertions.assertTrue(app.setCurrentPlaylist(app.getPlaylist(TEST_PATH_PLAYLIST2)));
        Assertions.assertEquals(app.getCurrentPlaylist().get().getPath(), TEST_PATH_PLAYLIST2);

        //test valid song - current playlist 2
        Assertions.assertTrue(app.setCurrentSong(app.getCurrentPlaylist().get().getSong(TEST_PATH_SONG2_15)));
        Assertions.assertEquals(app.getCurrentSong().get().getFile().toPath(), TEST_PATH_SONG2_15);

        // test invalid playlist
        Assertions.assertFalse(app.setCurrentPlaylist(app.getPlaylist(TEST_INVALID_PLAYLIST)));
        Assertions.assertEquals(app.getCurrentPlaylist(), Optional.empty());
    }

    @Test void testPlaylists() {
        Reader app = new ReaderImpl();

        PlayList plist = new Mp3PlayList(TEST_PATH_PLAYLIST2, Arrays.asList(TEST_PATH_SONG2_15, TEST_PATH_SONG2_16));
        app.setCurrentEnvironment(TEST_PATH_PLAYLIST1);
        PlayList plist2 = new Mp3PlayList(TEST_PATH_PLAYLIST1, app.getPlaylist(TEST_PATH_PLAYLIST1).get().getSongs().stream()
            .map(s -> s.getFile().toPath())
            .toList());

        /* test on playlist with static and small size */
        Assertions.assertTrue(plist.getSongs().get(0).getFile().toPath().equals(TEST_PATH_SONG2_15));
        Assertions.assertTrue(plist.getSongs().get(1).getFile().toPath().equals(TEST_PATH_SONG2_16));
        Assertions.assertEquals(2, plist.getSize());
        Assertions.assertEquals("0:7:13", plist.getTotalDuration());
        /* test on a playlist with dynamic and big size */
        Assertions.assertEquals(app.getPlaylist(TEST_PATH_PLAYLIST1).get().getSongs().size(), plist2.getSize());
        Assertions.assertEquals("1:56:44", plist2.getTotalDuration());
        
    }

    @Test void testSongs() {
        //TODO
    }

    @Test void test() {
        //TODO
    }
}