package elektreader.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import elektreader.api.PlayList;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.TilePane;
import javafx.scene.layout.VBox;

/* this class represent the controller to the Playlist view, which is controlled
 * by the GUI controller class
 */
public class PlayListsController {
    /* button generated by the constructor */
    private List<Button> btnPlaylists;
    /* an inner song controller because the two controllers are bonded with each other
     * by the logic
     */
    private SongsController controllerSongs;

    
    /**
     * Gets the playlist list from the static method getReader of GUI Controller
     * @param playlistsList the playlists panel in which the class grafts the buttons
     * @param songsList the songs panel to build the the new song controller
     */
    public PlayListsController(final ScrollPane playlistsPane, final ScrollPane songsPane) {
        this.btnPlaylists = new ArrayList<>(Collections.emptyList());
        TilePane songContainer = new TilePane();
        VBox plistContainer = new VBox();
        /* 
        for (var playlist : GUIController.getReader().getPlaylists()) {
            btnPlaylists.add(createButton(playlist,container, playlistsPane.getWidth()));
        }
        */
        GUIController.getReader().getPlaylists().stream()
            .map(playlist -> createButton(playlist,songContainer, playlistsPane.getWidth()))
            .filter(button -> btnPlaylists.add(button))
            .forEach(button -> plistContainer.getChildren().add(button));
        playlistsPane.setContent(plistContainer);
        songsPane.setContent(songContainer);
    }

    private Button createButton(final PlayList p, final TilePane songsList, final double resizeFactor) {
        Button btnPlaylist = new Button("#"+p.getName());
        btnPlaylist.setMinSize(resizeFactor, 25);
        btnPlaylist.setStyle("-fx-background-color: transparent;");
        btnPlaylist.setStyle("-fx-border-color: black;");
        btnPlaylist.setStyle("-fx-border-width: 4px;");
        btnPlaylist.setStyle("-fx-font: SansSerif Bold;");
        btnPlaylist.setStyle("-fx-font-size: 18;");
        btnPlaylist.setAlignment(Pos.TOP_LEFT);
        btnPlaylist.setOnMouseClicked(event -> {
                    this.btnPlaylists.stream()
                        .forEach(btn -> {
                                btn.setStyle("-fx-border-color: black;");
                            } 
                        );
                    btnPlaylist.setStyle("-fx-border-color: blue;");
                    btnPlaylist.setStyle("-fx-font-color: blue;");
					if(GUIController.getReader().setCurrentPlaylist(Optional.of(p))); {
                        songsList.getChildren().clear();
                        this.controllerSongs = new SongsController(songsList, p);
                    }
				});
        return btnPlaylist;
    }

    public List<Button> getBtnPlaylists() {
        return this.btnPlaylists;
    }
}
