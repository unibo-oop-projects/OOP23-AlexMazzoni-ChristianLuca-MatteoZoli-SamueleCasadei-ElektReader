package elektreader.controller;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import elektreader.api.PlayList;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.VBox;

/**
 * this class represent the controller to the Playlist view, which is controlled
 * by the GUI controller class.
 */
public class PlayListsController {
    /* button generated by the constructor */
    private final Map<Button, PlayList> btnPlaylists;
    private final SongsController songsController;
    private final VBox plistContainer;
    private final Label desc;

    /* to implement the switch between song views */
    private boolean onIcons = true;
    static final int DEF_SPACE = 15;

    /**
     * Gets the playlist list from the static method getReader of GUI Controller.
     * @param playlistsPane the playlists panel in which the class grafts the buttons
     * @param songsPane the songs panel to build the the new song controller
     * @param desc the description label on the song panel, it lists the number of songs in the playlist and,
     * also, the name of the playlist
     */
    @SuppressFBWarnings(
        value = "EI2",
        justification = "i need the parameters to be modifiable from external classes"
    )
    public PlayListsController(final ScrollPane playlistsPane, final ScrollPane songsPane, final Label desc) {

        this.btnPlaylists = new HashMap<>(Collections.emptyMap());
        this.desc = desc;
        final FlowPane songContainer = new FlowPane();
        this.songsController = new SongsController(songContainer, songsPane);
        this.plistContainer = new VBox();
        /* now the playlist container will keep its children resized to its current width */
        this.plistContainer.setFillWidth(true);

        songContainer.setPrefWidth(songsPane.getWidth());

        plistContainer.setPrefWidth(playlistsPane.getWidth());
        plistContainer.setSpacing(DEF_SPACE);

        GUIController.READER.getPlaylists().stream()
            .forEach( p -> {
                final var btn = createButton(p);
                plistContainer.getChildren().add(btn);
                btnPlaylists.put(btn, p);
            });

        this.btnPlaylists.keySet().stream()
            .forEach(btn -> btn.setPrefWidth(playlistsPane.getWidth()));

        playlistsPane.setContent(plistContainer);
        songsPane.setContent(songContainer);
    }

    private Button createButton(final PlayList p) {
        final Button btnPlaylist = new Button("#" + p.getName());
        btnPlaylist.getStyleClass().add("playlistbtn");
        btnPlaylist.setOnMouseClicked(event -> {
            this.btnPlaylists.keySet().stream()
                .forEach(btn -> {
                    btn.getStyleClass().removeIf(style -> "selected".equals(style));
            });
            final var btn = (Button) event.getSource();
            btn.getStyleClass().add("selected");
            GUIController.READER.setCurrentPlaylist(Optional.of(p));
            if (GUIController.READER.getCurrentPlaylist().isPresent()) {
                songsController.load(p, onIcons);
                this.desc.setText(" - " + p.getSize() + " - " + p.getName());
            }
        });
        return btnPlaylist;
    }

    /**
     * refreshes the song view.
     */
    public void reload() {
        this.btnPlaylists.keySet().stream()
                .peek(btn -> btn.getStyleClass().removeIf(style -> "selected".equals(style)))
                .filter(t -> this.btnPlaylists.get(t).equals(GUIController.READER.getCurrentPlaylist().get()))
                .forEach(t -> t.getStyleClass().add("selected"));
        this.songsController.load(GUIController.READER.getCurrentPlaylist().get(), onIcons);
    }

    /**
     * adjusts the size of panels and relative content, also call responsive for the songs controller.
     */
    public void responsive() {
        this.plistContainer.fillWidthProperty();
        this.songsController.responsive();
    }

    /**
     * switches and reloads the type of view, from icons to list or viceversa.
     */
    public void switchView() {
        onIcons = !onIcons;
        songsController.load(GUIController.READER.getCurrentPlaylist().get(), onIcons);
    }
}
